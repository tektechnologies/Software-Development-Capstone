using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using LogicLayer;
using DataObjects;
using DataAccessLayer;
using System.Collections.Generic;

namespace UnitTests
{
    [TestClass]
    public class SetupManagerTests
    {
        private ISetupManager _setupManager;
        private List<Setup> _setups;
        private SetupAccessorMock _setupAccessorMock;

        /// <summary>
        /// Author James Heim
        /// Created 2019-02-14
        /// 
        /// Initialize the Mock Accessor and Setup Manager.
        /// Reset the list of setups.
        /// </summary>
        [TestInitialize]
        public void TestInitialize()
        {
            _setupAccessorMock = new SetupAccessorMock();
            _setupManager = new SetupManager(_setupAccessorMock);
            _setups = null;
        }


        /// <summary>
        /// Author James Heim
        /// Created 2019-03-14
        /// 
        /// Test Successful Insert.
        /// </summary>
        [TestMethod]
        public void TestInsertSetupValid()
        {
            // Arrange.
            Setup expectedSetup = null;

            // Create the new Setup Object.
            Setup testSetup = new Setup()
            {
                // Setup ID is generated by the database.
                EventID = 100000,
                DateEntered = DateTime.Now,
                DateRequired = DateTime.Now.AddDays(10),
                Comments = "Test Valid Setup"

            };


            // Act.

            // Add the Setup and pull up a fresh list of the setups.
            var setupID = _setupManager.InsertSetup(testSetup);
            _setups = _setupManager.SelectAllSetups();

            // Attempt to retrieve the newly created Setup.
            expectedSetup = _setups.Find(x => x.SetupID == setupID);

            // Assert.

            // If we got this far without getting a NullArgumentException,
            // test if the setup we retrieved is identical to the one we created,
            // one property at a time.
            Assert.IsTrue
            (
                expectedSetup.EventID == testSetup.EventID &&
                expectedSetup.DateEntered == testSetup.DateEntered &&
                expectedSetup.DateRequired == testSetup.DateRequired &&
                expectedSetup.Comments == testSetup.Comments
            );
        }

        /// <summary>
        /// Author James Heim
        /// Created 2019-03-14
        /// 
        /// Test Bad DateEntered. Cannot enter a Date after today.
        /// </summary>
        [TestMethod]
        [ExpectedException(typeof(ArgumentOutOfRangeException))]
        public void TestInsertSetupDateEnteredBeforeToday()
        {
            // Arrange: Create the new Setup Object.
            Setup testSetup = new Setup()
            {
                // Setup ID is generated by the database.
                EventID = 100000,
                DateEntered = DateTime.Now.AddDays(-1),
                DateRequired = DateTime.Now.AddDays(10),
                Comments = "Test Invalid Setup"

            };


            // Act: Add the bad Setup. Expecting an ArgumentOutOfRangeException.
            var setupID = _setupManager.InsertSetup(testSetup);

            // At this point we should have thrown an Exception.
            
        }

        /// <summary>
        /// Author James Heim
        /// Created 2019-03-14
        /// 
        /// Test Bad DateEntered. Cannot enter a Date after today.
        /// </summary>
        [TestMethod]
        [ExpectedException(typeof(ArgumentOutOfRangeException))]
        public void TestInsertSetupDateEnteredAfterToday()
        {
            // Arrange: Create the new Setup Object.
            Setup testSetup = new Setup()
            {
                // Setup ID is generated by the database.
                EventID = 100000,
                DateEntered = DateTime.Now.AddDays(1),
                DateRequired = DateTime.Now.AddDays(10),
                Comments = "Test Invalid Setup"

            };


            // Act: Add the bad Setup, expecting an exception.
            var setupID = _setupManager.InsertSetup(testSetup);

            // At this point we should have thrown an Exception.

        }

        /// <summary>
        /// Author James Heim
        /// Created 2019-03-14
        /// 
        /// Test Bad DateRequired. Cannot enter a Date before now.
        /// </summary>
        [TestMethod]
        [ExpectedException(typeof(ArgumentOutOfRangeException))]
        public void TestInsertSetupDateRequiredBeforeToday()
        {
            // Arrange: Create the new Setup Object.
            Setup testSetup = new Setup()
            {
                // Setup ID is generated by the database.
                EventID = 100000,
                DateEntered = DateTime.Now.AddDays(10),
                DateRequired = DateTime.Now.AddDays(-1),
                Comments = "Test Invalid Setup"

            };


            // Act: Add the bad Setup. Expecting an ArgumentOutOfRangeException.
            var setupID = _setupManager.InsertSetup(testSetup);

            // At this point we should have thrown an Exception.

        }

        /// <summary>
        /// Author James Heim
        /// Created 2019-03-14
        /// 
        /// Test retrieving all Setups.
        /// </summary>
        [TestMethod]
        public void TestSelectAllSetups()
        {
            // Arrange: Create valid test Setups and add them to
            // the "database."
            Setup testSetup1 = new Setup()
            {
                // Setup ID is generated by the database.
                EventID = 100000,
                DateEntered = DateTime.Now,
                DateRequired = DateTime.Now.AddDays(10),
                Comments = "Test Valid Setup"

            };

            Setup testSetup2 = new Setup()
            {
                // Setup ID is generated by the database.
                EventID = 100000,
                DateEntered = DateTime.Now,
                DateRequired = DateTime.Now.AddDays(10),
                Comments = "Test Valid Setup"

            };

            var testSetup1ID = _setupManager.InsertSetup(testSetup1);
            var testSetup2ID = _setupManager.InsertSetup(testSetup2);


            // Act: Retrieve the list of setups from the Mock Accessor.
            _setups = _setupManager.SelectAllSetups();

            // Assert: Try to find each of the Setups in the _setups list.
            // If we don't get a null exception, then they've both been found.
            _setups.Find(x => x.SetupID == testSetup1ID &&
                x.DateEntered == testSetup1.DateEntered &&
                x.DateRequired == testSetup1.DateRequired &&
                x.Comments == testSetup1.Comments);

            _setups.Find(x => x.SetupID == testSetup2ID &&
                x.DateEntered == testSetup2.DateEntered &&
                x.DateRequired == testSetup2.DateRequired &&
                x.Comments == testSetup2.Comments);

        }

        /// <summary>
        /// Author James Heim
        /// Created 2019-03-14
        /// 
        /// Test retrieving the selected Setup.
        /// Add multiple test records to make sure the system
        /// can succesfully track multiple setups.
        /// </summary>
        [TestMethod]
        public void TestSelectSetup()
        {
            Setup actualSetup;

            // Arrange: Create valid test Setups and add them to
            // the "database." 
            Setup testSetup1 = new Setup()
            {
                // Setup ID is generated by the database.
                EventID = 100001,
                DateEntered = DateTime.Now,
                DateRequired = DateTime.Now.AddDays(10),
                Comments = "Test Valid Setup 1"

            };

            Setup expectedSetup = new Setup()
            {
                // Setup ID is generated by the database.
                EventID = 100002,
                DateEntered = DateTime.Now,
                DateRequired = DateTime.Now.AddDays(10),
                Comments = "Test Expected Valid Setup"

            };

            Setup testSetup3 = new Setup()
            {
                // Setup ID is generated by the database.
                EventID = 100005,
                DateEntered = DateTime.Now,
                DateRequired = DateTime.Now.AddDays(10),
                Comments = "Test Valid Setup 3"

            };

            _setupManager.InsertSetup(testSetup1);
            var testSetupID = _setupManager.InsertSetup(expectedSetup);
            _setupManager.InsertSetup(testSetup3);


            // Act: Retrieve the list of setups from the Mock Accessor.
            actualSetup = _setupManager.SelectSetup(testSetupID);

            // Assert: That the attributes of the expected Setup and the actual Setup
            // are identical.
            Assert.IsTrue( expectedSetup.SetupID == actualSetup.SetupID &&
                expectedSetup.DateEntered == actualSetup.DateEntered &&
                expectedSetup.DateRequired == actualSetup.DateRequired &&
                expectedSetup.Comments == actualSetup.Comments);
        }

        
        /// <summary>
        /// Author James Heim
        /// Created 2019-03-15
        /// 
        /// Check if we can update with a valid Setup.
        /// </summary>
        [TestMethod]
        public void TestUpdateSetupValid()
        {
            // Arrange.
            Setup actualSetup = null;

            // Create the original Setup Object.
            Setup originalSetup = new Setup()
            {
                // Setup ID is generated by the database.
                EventID = 100000,
                DateEntered = DateTime.Now,
                DateRequired = DateTime.Now.AddDays(10),
                Comments = "Test Valid Setup"

            };

            // Create the new Setup Object.
            Setup expectedSetup = new Setup()
            {
                
                EventID = 100000,
                DateEntered = originalSetup.DateEntered,
                DateRequired = DateTime.Now.AddDays(12),
                Comments = "Test Updated Setup"

            };

            // Get the setupID generated for the original Setup and assign it to the 
            // Setup we will update with.
            int setupID = _setupManager.InsertSetup(originalSetup);
            expectedSetup.SetupID = setupID;


            // Act: Update the Setup.
            _setupManager.UpdateSetup(expectedSetup, originalSetup);

            // Assert: Retrieve the Setup with the same ID from the list
            // and compare it to the expectedSetup to see if the changes stuck.
            actualSetup = _setupManager.SelectSetup(setupID);


            Assert.IsTrue( expectedSetup.EventID == actualSetup.EventID &&
                expectedSetup.DateEntered == actualSetup.DateEntered &&
                expectedSetup.DateRequired == actualSetup.DateRequired &&
                expectedSetup.Comments == actualSetup.Comments);
        }

        /// <summary>
        /// Author James Heim
        /// Created 2019-03-15
        /// 
        /// Try to update DateEntered. Should not be allowed.
        /// </summary>
        [TestMethod]
        [ExpectedException(typeof(InvalidOperationException))]
        public void TestUpdateSetupInvalidDateEnteredChanged()
        {
            // Arrange.

            // Create the original Setup Object.
            Setup originalSetup = new Setup()
            {
                // Setup ID is generated by the database.
                EventID = 100000,
                DateEntered = DateTime.Now,
                DateRequired = DateTime.Now.AddDays(10),
                Comments = "Test Valid Setup"

            };

            // Create the new Setup Object.
            Setup invalidSetup = new Setup()
            {

                EventID = 100000,
                // Change the date the Setup was entered.
                // Should not be allowed.
                DateEntered = DateTime.Now.AddDays(-1),
                DateRequired = DateTime.Now.AddDays(10),
                Comments = "Test Invalid Setup"

            };

            // Get the setupID generated for the original Setup and assign it to the 
            // Setup we will update with.
            int setupID = _setupManager.InsertSetup(originalSetup);
            invalidSetup.SetupID = setupID;


            // Act: Attempt to Update the Setup.
            // Should throw exception at this point.
            _setupManager.UpdateSetup(invalidSetup, originalSetup);


            // We should have had an exception by now.

        }

        /// <summary>
        /// Author James Heim
        /// Created 2019-03-15
        /// 
        /// Test that UpdateSetup does not set DateRequired
        /// before today.
        /// </summary>
        [TestMethod]
        [ExpectedException(typeof(ArgumentOutOfRangeException))]
        public void TestUpdateSetupInvalidDateRequiredBeforeToday()
        {
            // Arrange.

            // Create the original Setup Object.
            Setup originalSetup = new Setup()
            {
                // Setup ID is generated by the database.
                EventID = 100000,
                DateEntered = DateTime.Now,
                DateRequired = DateTime.Now.AddDays(10),
                Comments = "Test Valid Setup"

            };

            // Create the new Setup Object.
            Setup invalidSetup = new Setup()
            {

                EventID = 100000,
                // Change the date the Setup was entered.
                // Should not be allowed.
                DateEntered = DateTime.Now,
                DateRequired = DateTime.Now.AddDays(-1),
                Comments = "Test Invalid Setup"

            };

            // Get the setupID generated for the original Setup and assign it to the 
            // Setup we will update with.
            int setupID = _setupManager.InsertSetup(originalSetup);
            invalidSetup.SetupID = setupID;


            // Act: Attempt to Update the Setup.
            // Should throw exception at this point.
            _setupManager.UpdateSetup(invalidSetup, originalSetup);


            // We should have had an exception by now.

        }


        /// <summary>
        /// Author James Heim
        /// Created 2019-02-15
        /// 
        /// Test Deleting a Setup.
        /// </summary>
        [TestMethod]
        public void TestDeleteSetup()
        {
            // Arrange.
            Setup setup = new Setup()
            {
                // Setup ID is generated by the database.
                EventID = 100000,
                DateEntered = DateTime.Now,
                DateRequired = DateTime.Now.AddDays(10),
                Comments = "Test Valid Setup"

            };

            int setupID = _setupManager.InsertSetup(setup);


            // Act: Delete the setup.
            _setupManager.DeleteSetup(setupID);

            // Assert: The Setup no longer exists; attempting to retrieve it will return null.
            Assert.IsNull(_setupManager.SelectSetup(setupID));

        }

        /// <summary>
        /// Author James Heim
        /// Created 2019-05-03
        /// 
        /// Test retrieving the setup with the supplied date.
        /// </summary>
        [TestMethod]
        public void TestSelectSetupDateEntered()
        {
            List<VMSetup> setupList;

            // Arrange: Create valid test Setups and add them to
            // the "database." 
            Setup testSetup1 = new Setup()
            {
                // Setup ID is generated by the database.
                EventID = 100001,
                DateEntered = DateTime.Now,
                DateRequired = DateTime.Now.AddDays(10),
                Comments = "Test Valid Setup 1"

            };

            Setup expectedSetup = new Setup()
            {
                // Setup ID is generated by the database.
                EventID = 100002,
                DateEntered = DateTime.Now,
                DateRequired = DateTime.Now.AddDays(10),
                Comments = "Test Expected Valid Setup"

            };

            Setup testSetup3 = new Setup()
            {
                // Setup ID is generated by the database.
                EventID = 100005,
                DateEntered = DateTime.Now,
                DateRequired = DateTime.Now.AddDays(10),
                Comments = "Test Valid Setup 3"

            };

            _setupManager.InsertSetup(testSetup1);
            _setupManager.InsertSetup(expectedSetup);
            _setupManager.InsertSetup(testSetup3);


            // Act: Retrieve the list of setups from the Mock Accessor.
            setupList = _setupManager.SelectDateEntered(expectedSetup.DateEntered);

            // Assert: That the expectedSetup exists in the list.
            Assert.IsNotNull(setupList.Find(x =>
                x.DateEntered == expectedSetup.DateEntered &&
                x.Comments == expectedSetup.Comments &&
                x.DateRequired == expectedSetup.DateRequired &&
                x.SetupID == x.SetupID));
        }

        /// <summary>
        /// Author James Heim
        /// Created 2019-05-03
        /// 
        /// Test retrieving the setup with the supplied date.
        /// </summary>
        [TestMethod]
        public void TestSelectSetupDateRequired()
        {
            List<VMSetup> setupList;

            // Arrange: Create valid test Setups and add them to
            // the "database." 
            Setup testSetup1 = new Setup()
            {
                // Setup ID is generated by the database.
                EventID = 100001,
                DateEntered = DateTime.Now,
                DateRequired = DateTime.Now.AddDays(10),
                Comments = "Test Valid Setup 1"

            };

            Setup expectedSetup = new Setup()
            {
                // Setup ID is generated by the database.
                EventID = 100002,
                DateEntered = DateTime.Now,
                DateRequired = DateTime.Now.AddDays(15),
                Comments = "Test Expected Valid Setup"

            };

            Setup testSetup3 = new Setup()
            {
                // Setup ID is generated by the database.
                EventID = 100005,
                DateEntered = DateTime.Now,
                DateRequired = DateTime.Now.AddDays(20),
                Comments = "Test Valid Setup 3"

            };

            _setupManager.InsertSetup(testSetup1);
            _setupManager.InsertSetup(expectedSetup);
            _setupManager.InsertSetup(testSetup3);


            // Act: Retrieve the list of setups from the Mock Accessor.
            setupList = _setupManager.SelectDateRequired(expectedSetup.DateRequired);

            // Assert: That the expectedSetup exists in the list.
            Assert.IsNotNull(setupList.Find(x =>
                x.DateEntered == expectedSetup.DateEntered &&
                x.Comments == expectedSetup.Comments &&
                x.DateRequired == expectedSetup.DateRequired &&
                x.SetupID == x.SetupID));
        }
    }
}
