using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using LogicLayer;
using DataObjects;
using DataAccessLayer;
using System.Collections.Generic;

namespace UnitTests
{
    /// <summary>
    /// James Heim
    /// Created 2019-02-15
    /// 
    /// Tests for the SetupListManager.
    /// </summary>
    [TestClass]
    public class SetupListManagerTests
    {

        private List<SetupList> _setupLists;
        private ISetupListManager _setupListManager;
        private ISetupListAccessor _setupListAccessor;

        [TestInitialize]
        public void TestInitialize()
        {
            _setupLists = new List<SetupList>();
            _setupListAccessor = new SetupListAccessorMock();
            _setupListManager = new SetupListManager(_setupListAccessor);

        }

        /// <summary>
        /// Author James Heim
        /// Created 2019-03-15
        /// 
        /// Test retrieving all setup lists.
        /// </summary>
        [TestMethod]
        public void TestSelectAllSetupLists()
        {
            // Arrange: Create valid test Setup Lists and add them to
            // the "database."
            SetupList testSetupList1 = new SetupList()
            {
                // SetupList ID is generated by the database.
                SetupID = 100000,
                Completed = false,
                Description = "Test valid",
                Comments = "Test Valid"

            };

            SetupList testSetupList2 = new SetupList()
            {
                // SetupList ID is generated by the database.
                SetupID = 100000,
                Completed = false,
                Description = "Test valid",
                Comments = "Test Valid"

            };

            _setupListManager.InsertSetupList(testSetupList1);
            _setupListManager.InsertSetupList(testSetupList2);


            // Act: Retrieve the list of setups from the Mock Accessor.
            _setupLists = _setupListManager.SelectAllSetupLists();

            // Assert: Try to find each of the Setups in the _setups list.
            // If we don't get a null exception, then they've both been found.
            _setupLists.Find(x => x.SetupID == testSetupList1.SetupID &&
                x.Completed == testSetupList1.Completed &&
                x.Description == testSetupList1.Description &&
                x.Comments == testSetupList1.Comments);

            _setupLists.Find(x => x.SetupID == testSetupList2.SetupID &&
               x.Completed == testSetupList2.Completed &&
               x.Description == testSetupList2.Description &&
               x.Comments == testSetupList2.Comments);

        }

        /// <summary>
        /// Author James Heim
        /// Created 2019-03-15
        /// 
        /// Retrieve the completed setup lists.
        /// </summary>
        [TestMethod]
        public void TestSelectCompletedSetupListsValid()
        {
            // Arrange: Create a valid Setup Lists that's "complete"
            // as well as an incomplete one.
            SetupList testSetupList1 = new SetupList()
            {
                // SetupList ID is generated by the database.
                SetupID = 100000,
                Completed = true,
                Description = "Test valid",
                Comments = "Test Valid"

            };

            SetupList testSetupList2 = new SetupList()
            {
                // SetupList ID is generated by the database.
                SetupID = 100000,
                Completed = false,
                Description = "Test valid",
                Comments = "Test Valid"

            };

            _setupListManager.InsertSetupList(testSetupList1);
            _setupListManager.InsertSetupList(testSetupList2);


            // Act: Retrieve the list of setups from the Mock Accessor.
            _setupLists = _setupListManager.SelectAllSetupLists();

            // Assert: Try to find each of the Setups in the _setups list.
            Assert.IsNotNull(_setupLists.Find(x => x.SetupID == testSetupList1.SetupID &&
                x.Completed == testSetupList1.Completed &&
                x.Description == testSetupList1.Description &&
                x.Comments == testSetupList1.Comments));


        }


        /// <summary>
        /// Author James Heim
        /// Created 2019-03-15
        /// 
        /// Retrieve the incomplete setup lists.
        /// </summary>
        [TestMethod]
        public void TestSelectIncompleteSetupListsValid()
        {
            // Arrange: Create a valid Setup Lists that's "complete"
            // as well as an incomplete one.
            SetupList testSetupList2 = new SetupList()
            {
                // SetupList ID is generated by the database.
                SetupID = 100000,
                Completed = true,
                Description = "Test valid",
                Comments = "Test Valid"

            };

            SetupList testSetupList1 = new SetupList()
            {
                // SetupList ID is generated by the database.
                SetupID = 100000,
                Completed = false,
                Description = "Test valid",
                Comments = "Test Valid"

            };

            _setupListManager.InsertSetupList(testSetupList1);
            _setupListManager.InsertSetupList(testSetupList2);


            // Act: Retrieve the list of setups from the Mock Accessor.
            _setupLists = _setupListManager.SelectAllSetupLists();

            // Assert: Try to find each of the Setups in the _setups list.
            Assert.IsNotNull(_setupLists.Find(x => x.SetupID == testSetupList1.SetupID &&
                x.Completed == testSetupList1.Completed &&
                x.Description == testSetupList1.Description &&
                x.Comments == testSetupList1.Comments));


        }

        /// <summary>
        /// Author James Heim
        /// Created 2019-03-15
        /// 
        /// Retrieve the completed lists and Assert that there are no
        /// incompleted lists.
        /// </summary>
        [TestMethod]
        public void TestSelectCompletedSetupListsValidNoIncomplete()
        {
            // Arrange: Create two valid setup lists that are both complete.
            SetupList testSetupList1 = new SetupList()
            {
                // SetupList ID is generated by the database.
                SetupID = 100000,
                Completed = true,
                Description = "Test valid",
                Comments = "Test Valid"

            };

            SetupList testSetupList2 = new SetupList()
            {
                // SetupList ID is generated by the database.
                SetupID = 100000,
                Completed = true,
                Description = "Test valid",
                Comments = "Test Valid"

            };

            _setupListManager.InsertSetupList(testSetupList1);
            _setupListManager.InsertSetupList(testSetupList2);


            // Act: Retrieve the list of setups from the Mock Accessor.
            _setupLists = _setupListManager.SelectAllSetupLists();

            // Assert: Try to find each of the Setups in the _setups list.
            Assert.IsNull(_setupLists.Find(x => x.Completed == false));


        }

        /// <summary>
        /// Author James Heim
        /// Created 2019-03-15
        /// 
        /// Retrieve the completed lists and Assert that there are no
        /// completed lists.
        /// </summary>
        [TestMethod]
        public void TestSelectCompletedSetupListsValidNoComplete()
        {
            // Arrange: Create two incomplete setup lists.
            SetupList testSetupList1 = new SetupList()
            {
                // SetupList ID is generated by the database.
                SetupID = 100000,
                Completed = false,
                Description = "Test valid",
                Comments = "Test Valid"

            };

            SetupList testSetupList2 = new SetupList()
            {
                // SetupList ID is generated by the database.
                SetupID = 100000,
                Completed = false,
                Description = "Test valid",
                Comments = "Test Valid"

            };

            _setupListManager.InsertSetupList(testSetupList1);
            _setupListManager.InsertSetupList(testSetupList2);


            // Act: Retrieve the list of setups from the Mock Accessor.
            _setupLists = _setupListManager.SelectAllSetupLists();

            // Assert: Try to find each of the Setups in the _setups list.
            Assert.IsNull(_setupLists.Find(x => x.Completed == true));


        }


        /// <summary>
        /// Author James Heim
        /// Created 2019-03-15
        /// 
        /// Insert SetupList test where nothing goes wrong.
        /// </summary>
        [TestMethod]
        public void TestInsertSetupListValid()
        {
            // Arrange.
            SetupList expectedSetupList = null;

            // Create the new Setup Object.
            SetupList testSetupList = new SetupList()
            {
                // SetupListID is generated by the database.
                SetupID = 100002,
                Completed = false,
                Description = "test test",
                Comments = "Test Valid SetupList"

            };


            // Act.

            // Add the Setup and pull up a fresh list of the setups.
            _setupListManager.InsertSetupList(testSetupList);
            _setupLists = _setupListManager.SelectAllSetupLists();

            // Attempt to retrieve the newly created Setup.
            expectedSetupList = _setupLists.Find(x => x.SetupID == testSetupList.SetupID &&
                x.Completed == testSetupList.Completed &&
                x.Description == testSetupList.Description &&
                x.Comments == testSetupList.Comments);

            // Assert.

            // If we got this far without getting a NullArgumentException,
            // test if the setup we retrieved is identical to the one we created,
            // one property at a time.
            Assert.IsTrue
            (
                expectedSetupList.SetupID == testSetupList.SetupID &&
                expectedSetupList.Completed == testSetupList.Completed &&
                expectedSetupList.Description == testSetupList.Description &&
                expectedSetupList.Comments == testSetupList.Comments
            );
        }

        /// <summary>
        /// Author James Heim
        /// Created 2019-02-15
        /// 
        /// Test Deleting a SetupList.
        /// </summary>
        [TestMethod]
        public void TestDeleteSetupList()
        {
            // Arrange.
            SetupList setupList = new SetupList()
            {
                // SetupListID is generated by the database.
                SetupID = 100000,
                Completed = false,
                Description = "test test",
                Comments = "Test Valid Setup"

            };

            _setupListManager.InsertSetupList(setupList);

            int setupListID = _setupListManager.SelectAllActiveSetupLists().Find(x =>
               x.SetupID == setupList.SetupID &&
               x.Completed == setupList.Completed &&
               x.Description == setupList.Description &&
               x.Comments == setupList.Comments).SetupListID;

            // Deactivate the setup.
            _setupListManager.DeleteSetupList(setupListID, true);

            // Act: Delete the setup.
            _setupListManager.DeleteSetupList(setupListID, false);

            // Assert: The Setup no longer exists; attempting to retrieve it will return null.
            Assert.IsNull(_setupListManager.SelectSetupList(setupListID));

        }


        /// <summary>
        /// Author James Heim
        /// Created 2019-03-15
        /// 
        /// Test that the UpdateSetupList works when it should.
        /// </summary>
        [TestMethod]
        public void UpdateSetupListValid()
        {
            SetupList actualSetupList = null;

            // Create the original Setup Object.
            SetupList originalSetupList = new SetupList()
            {
                // SetupListID is generated by the database.
                SetupID = 100000,
                Description = "Test Description",
                Completed = true,
                Comments = "Test Valid SetupList"

            };

            // Create the new Setup Object.
            SetupList expectedSetupList = new SetupList()
            {
                // SetupListID is generated by the database.
                SetupID = 100000,
                Description = "Test Descriptions",
                Completed = false,
                Comments = "Test Valid SetupLists"

            };

            // Get the setupID generated for the original Setup and assign it to the 
            // Setup we will update with.
            _setupListManager.InsertSetupList(originalSetupList);
            int setupListID = _setupListManager.SelectAllSetupLists().Find(x => x.SetupID == originalSetupList.SetupID &&
                x.Description == originalSetupList.Description &&
                x.Completed == originalSetupList.Completed &&
                x.Comments == originalSetupList.Comments).SetupListID;
            expectedSetupList.SetupID = setupListID;


            // Act: Update the Setup.
            _setupListManager.UpdateSetupList(expectedSetupList, originalSetupList);

            // Assert: Retrieve the Setup with the same ID from the list
            // and compare it to the expectedSetup to see if the changes stuck.
            actualSetupList = _setupListManager.SelectSetupList(setupListID);


            Assert.IsTrue(expectedSetupList.SetupID == actualSetupList.SetupID &&
                expectedSetupList.Description == actualSetupList.Description &&
                expectedSetupList.Completed == actualSetupList.Completed &&
                expectedSetupList.Comments == actualSetupList.Comments);
        }

    }
}